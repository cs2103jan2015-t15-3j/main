//@author: a0111842r



	/**
	 * origin: C:\Users\SAM\Documents\main\src\junit\StorageTest.java
	 */

package junit;

import static org.junit.Assert.*;

import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import logic.Enumerator.TaskType;
import logic.Repository;
import logic.Task;

import org.junit.Test;

import com.opencsv.CSVReader;

import storage.ProTaskStorage;

public class StorageTest {

	private final String dataBaseDir = "ProTaskDatabase.csv";

	@Test
	// Testing if add, delete and clear commands reflect correctly in the database with expected output.
	public void compareDataBaseRecords() throws IOException {
		
		ProTaskStorage tempStorage = new ProTaskStorage();
		Repository repo = new Repository();
		
		String dataBasePath = tempStorage.getCurrentDataBasePath()+"/"+dataBaseDir;
		tempStorage.addStringTask(dataBasePath, 1, "One", "", "", "First test", false, "FL");
		tempStorage.addStringTask(dataBasePath, 2, "Two", "", "", "Second test", false, "FL");
		
		ArrayList<Task> tempArray = new ArrayList<Task>();
		Task taskOne = new Task();
		taskOne.setTaskID(1); taskOne.setTaskName("One"); taskOne.setRemarks("First test");taskOne.setIsCompleted(false);taskOne.setType(TaskType.FLOATING);
		Task taskTwo = new Task();
		taskTwo.setTaskID(2); taskTwo.setTaskName("Two"); taskTwo.setRemarks("Second test"); taskTwo.setIsCompleted(false); taskTwo.setType(TaskType.FLOATING);
		tempArray.add(taskOne);
		tempArray.add(taskTwo);
		repo.setBuffer(tempArray);
		
		repo = tempStorage.clearAllTasks(repo);
		
		tempStorage.addStringTask(dataBasePath, 3, "Three", "", "", "Third test", false, "FL");
		
		
		CSVReader reader = new CSVReader(new FileReader(dataBasePath));
		List<String[]> allRows = reader.readAll();
		boolean isColumn = true;

		for (String[] row : allRows) {
			if (isColumn) {
				isColumn = false;
			} 
			else
			{
				assertEquals(Integer.parseInt(row[0]),3);
				assertEquals(row[1],"Three");
				assertEquals(row[4],"Third test");
			}
		}
		reader.close();
		
		assertEquals("","");
	}
}

	// End of segment: C:\Users\SAM\Documents\main\src\junit\StorageTest.java





	/**
	 * origin: C:\Users\SAM\Documents\main\src\parser\ParserMove.java
	 */

package parser;

import java.io.File;

public class ParserMove {

	public static void moveDataBase(Interpreter item, String[] inputArray) {
		boolean wrongFormat = false;
		boolean expectedParameter = false;
		String dataBasePath = "";

		for (int i = 0; i < inputArray.length; i++) {
			if (expectedParameter && !inputArray[i].isEmpty()) {
				wrongFormat = true;
				item.setIsError(true);
				item.setFeedbackMsg(ParserMessage.INVALID_INPUT);
				break;
				
			} else if (i != 0 && !inputArray[i].isEmpty() && !expectedParameter) {
				expectedParameter = true;
				dataBasePath = inputArray[i];

				File tempPath = new File(dataBasePath);
				if(!tempPath.exists())
				{
					item.setIsError(true);
					item.setFeedbackMsg(ParserMessage.INVALID_FILEPATH);
				}

				
			}
		}
		if (!wrongFormat) {
			item.setDataBasePath(dataBasePath);
		} 
	}
}

	// End of segment: C:\Users\SAM\Documents\main\src\parser\ParserMove.java





	/**
	 * origin: C:\Users\SAM\Documents\main\src\storage\KeyAlphabet.java
	 */

package storage;

import java.util.ArrayList;

public class KeyAlphabet {

	private Character alphabet;
	private int positionNumber;
	private int indexNumber;
	private ArrayList<KeyWord> wordList;
	private ArrayList<KeyAlphabet> children;

	public KeyAlphabet() {
		wordList = new ArrayList<KeyWord>();
		children = new ArrayList<KeyAlphabet>();
	}

	public Character getAlphabet() {
		return alphabet;
	}

	public void setAlphabet(Character alphabet) {
		this.alphabet = alphabet;
	}

	public int getPositionNumber() {
		return positionNumber;
	}

	public void setPositionNumber(int positionNumber) {
		this.positionNumber = positionNumber;
	}

	public void addWord(KeyWord word) {
		wordList.add(word);
	}
	public ArrayList<KeyWord> getWordList()
	{
		return wordList;
	}
	public boolean checkChildExist(Character c) {
		boolean exist = false;
		for (KeyAlphabet alpha : children) {
			if (alpha.getAlphabet().equals(Character.toUpperCase(c))) {
				exist = true;
				break;
			}
		}
		return exist;
	}

	public KeyAlphabet getChildAlphabet(Character c) {

		KeyAlphabet returnChild = null;
		for (KeyAlphabet child : children) {
			if (child.getAlphabet().equals(Character.toUpperCase(c))) {
				returnChild = child;
			}
		}
		return returnChild;
	}

	public boolean addChildKeyAlphabet(KeyAlphabet childAlphabet) {

		boolean successAdd = false;
		boolean exist = false;
		for (KeyAlphabet alpha : children) {
			if (alpha.getAlphabet().equals(childAlphabet.getAlphabet())) {
				exist = true;
				break;
			}
		}
		if (exist) {
			successAdd = false;
		} else {
			children.add(childAlphabet);
			successAdd = true;
		}

		return successAdd;
	}

	public int getIndexNumber() {
		return indexNumber;
	}

	public void setIndexNumber(int indexNumber) {
		this.indexNumber = indexNumber;
	}

	@Override
	public String toString() {
		return "*" + this.getIndexNumber() + " " + this.getPositionNumber()
				+ " " + this.getAlphabet() + "\n" + this.children + "*\n";
	}

}

	// End of segment: C:\Users\SAM\Documents\main\src\storage\KeyAlphabet.java





	/**
	 * origin: C:\Users\SAM\Documents\main\src\storage\KeyWord.java
	 */

package storage;

import java.util.ArrayList;
import java.util.Comparator;


public class KeyWord implements Comparable<KeyWord> {

	private int keyWordID;
	private String word;
	private ArrayList<Character> splitName;
	private int taskID;

	public KeyWord() {

	}

	public int getKeyWordID() {
		return keyWordID;
	}

	public void setKeyWordID(int keyWordID) {
		this.keyWordID = keyWordID;
	}

	public String getWord() {
		return word;
	}

	public void setWord(String word) {
		this.word = word;
	}

	public ArrayList<Character> getSplitName() {
		return splitName;
	}

	public void setSplitName(ArrayList<Character> splitName) {
		this.splitName = splitName;
	}

	public int getTaskID() {
		return taskID;
	}

	public void setTaskID(int taskID) {
		this.taskID = taskID;
	}

	@Override
	public String toString() {
		return "[" + this.getKeyWordID() + " " + this.getWord() + " "
				+ this.getSplitName() + "]";
	}

	public static Comparator<KeyWord> WordNameComparator = new Comparator<KeyWord>() {

		public int compare(KeyWord word1, KeyWord word2) {

			String wordName1 = word1.getWord().toUpperCase();
			String wordName2 = word2.getWord().toUpperCase();

			// ascending order
			return wordName1.compareTo(wordName2);

			// descending order
			// return wordName2.compareTo(wordName1);
		}

	};

	@Override
	public int compareTo(KeyWord o) {
		// TODO Auto-generated method stub
		return 0;
	}

}

	// End of segment: C:\Users\SAM\Documents\main\src\storage\KeyWord.java





	/**
	 * origin: C:\Users\SAM\Documents\main\src\storage\KeyWordStorage.java
	 */

package storage;

import java.io.FileReader;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import userInterface.Logging;
import logic.Task;

import com.opencsv.CSVParser;
import com.opencsv.CSVReader;

public class KeyWordStorage {

	// Find the index of the input (2nd letter?)
	// Then find what alphabet is on the 2nd letter? (r?)

	ArrayList<KeyAlphabet> allAlphabets;
	private boolean isColumn = true;
	private int keyWordID;
	private String taskDataBase = "ProTaskDatabase.csv";
	private final Character[] letters = { 'A', 'B', 'C', 'D', 'E', 'F', 'G',
			'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',
			'U', 'V', 'W', 'X', 'Y', 'Z', '1', '2', '3', '4', '5', '6', '7',
			'8', '9', ' ', '/', ':', '`', '~', '!', '@', '#', '$', '%', '^',
			'&', '*', '(', ')', '\'', '\\', '.', ',', '?' };
	private ArrayList<KeyWord> allKeyWords;
	private ProTaskStorage pStorage;
	private final String weightPercentage = "0.6";

	public KeyWordStorage() {

		ProTaskStorage proT = new ProTaskStorage();
		taskDataBase = proT.getCurrentDataBasePath() + "/ProTaskDatabase.csv";
		allAlphabets = new ArrayList<KeyAlphabet>();
		keyWordID = 1;
		allKeyWords = new ArrayList<KeyWord>();
		pStorage = new ProTaskStorage();

		for (int j = 0; j < letters.length; j++) {
			KeyAlphabet alphabet = new KeyAlphabet();
			alphabet.setAlphabet(letters[j]);
			alphabet.setIndexNumber(j);
			alphabet.setPositionNumber(0);
			allAlphabets.add(alphabet);
		}

		try {
			populateDataBase();
			Collections.sort(allKeyWords, KeyWord.WordNameComparator);
			mapKeyWords();
			// System.out.println(allAlphabets);

		} catch (IOException e) {
			Logging.getInputLog("Unable to populate database, please check Database file!");
		}

	}

	public ArrayList<Task> powerSearch(String input) {

		ArrayList<KeyWord> results = new ArrayList<KeyWord>();
		ArrayList<Task> tasksResults = new ArrayList<Task>();

		if (!input.equals(" ")) {
			Queue<Character> queueInput = new LinkedList<Character>();

			for (int i = 0; i < input.length(); i++) {

				if (i != 0 && input.charAt(i) != ' ') {
					queueInput.add(input.charAt(i));
				}

			}
			results = getBestMatch(queueInput,
					allAlphabets.get(getAlphabetIndex(queueInput.peek())));

			ArrayList<KeyWord> secondResult = weightSearch(input);
			for (KeyWord result : secondResult) {
				if (!results.contains(result)) {
					results.add(result);
				}
			}
			for (KeyWord result : results) {
				Task task = pStorage.getTask(result.getTaskID());
				if (!tasksResults.contains(task)) {
					tasksResults.add(task);
				}
			}
		}
		return tasksResults;

	}

	private ArrayList<KeyWord> weightSearch(String input) {

		if (input.charAt(0) == ' ' && input.length() > 1) {
			input = input.substring(1, input.length());
		}
		ArrayList<KeyWord> results = new ArrayList<KeyWord>();
		for (KeyWord word : allKeyWords) {
			int matchCount = 0;
			String keyword = word.getWord();
			ArrayList<String> tempCharWord = new ArrayList<String>();
			for (int i = 0; i < keyword.length(); i++) {
				tempCharWord.add(keyword.toUpperCase().split("")[i]);
			}
			Collections.sort(tempCharWord);
			for (String s : input.split("")) {
				if (tempCharWord.indexOf(s.toUpperCase()) != -1) {
					tempCharWord.remove(tempCharWord.indexOf(s.toUpperCase()));
					matchCount++;
				}
			}

			int scale = 100;
			BigDecimal num1 = new BigDecimal(matchCount);
			BigDecimal num2 = new BigDecimal(word.getWord().length());
			BigDecimal referenceNum = new BigDecimal(weightPercentage);
			BigDecimal answer = num1.divide(num2, scale, RoundingMode.HALF_UP);

			if (answer.compareTo(referenceNum) >= 0) {
				// System.out.println(answer.toString());
				// System.out.println(word.getWord());
				results.add(word);
			}
		}
		return results;
	}

	private ArrayList<KeyWord> getBestMatch(Queue<Character> queueChar,
			KeyAlphabet alphabet) {
		ArrayList<KeyWord> results = new ArrayList<KeyWord>();
		queueChar.poll();
		Character nextChar = queueChar.peek();
		if (nextChar != null) {
			if (alphabet.getChildAlphabet(nextChar) != null) {
				results = getBestMatch(queueChar,
						alphabet.getChildAlphabet(nextChar));
			} else // if reached the end of the available keywords
			{
				ArrayList<KeyWord> wordList = alphabet.getWordList();
				results.addAll(wordList);
			}
		} else // if reached the end of input
		{
			ArrayList<KeyWord> wordList = alphabet.getWordList();
			results.addAll(wordList);
		}
		return results;
	}

	private int getAlphabetIndex(Character c) {
		int index = 0;
		for (int i = 0; i < letters.length; i++) {
			if (letters[i].equals(Character.toUpperCase(c))) {
				index = i;
				break;
			}
		}
		return index;
	}

	private void mapKeyWords() {
		for (KeyWord word : allKeyWords) {

			if (!word.getWord().isEmpty()) {
				Character[] chars = word.getSplitName().toArray(
						new Character[0]);
				int index = 0;

				if (allAlphabets.get(getAlphabetIndex(chars[index])) != null) {
					allAlphabets.get(getAlphabetIndex(chars[index])).addWord(
							word);

					if (index + 1 != chars.length) {

						mapping(word, chars[index + 1], index + 1,
								allAlphabets
										.get(getAlphabetIndex(chars[index])));

					}
				}

				else {// create one
				}

			}
		}

	}

	private void mapping(KeyWord word, Character nextChar, int index,
			KeyAlphabet rootAlphabet) {

		KeyAlphabet newAlphabet = new KeyAlphabet();
		if (rootAlphabet.checkChildExist(nextChar)) {
			newAlphabet = rootAlphabet.getChildAlphabet(nextChar);
		} else {
			newAlphabet.setAlphabet(Character.toUpperCase(nextChar));
			newAlphabet.setPositionNumber(index);
			newAlphabet.setIndexNumber(getAlphabetIndex(nextChar));
			rootAlphabet.addChildKeyAlphabet(newAlphabet);
		}
		newAlphabet.addWord(word);

		if (index + 1 != word.getWord().length()) {

			mapping(word, word.getSplitName().get(index + 1), index + 1,
					newAlphabet);
		}
	}

	private void populateDataBase() throws IOException {
		CSVReader reader = new CSVReader(new FileReader(taskDataBase),
				CSVParser.DEFAULT_SEPARATOR, CSVParser.DEFAULT_QUOTE_CHARACTER,
				'\0');
		List<String[]> allRows = reader.readAll();

		for (String[] row : allRows) {
			if (isColumn) {
				isColumn = false;
			} else {

				int taskID = Integer.parseInt(row[0]);
				String taskName = row[1];
				ArrayList<Character> chars = new ArrayList<Character>();
				for (int i = 0; i < taskName.length(); i++) {
					chars.add(Character.toUpperCase(taskName.charAt(i)));
				}
				KeyWord keyTaskName = new KeyWord();
				keyTaskName.setTaskID(taskID);
				keyTaskName.setWord(taskName);
				keyTaskName.setSplitName(chars);
				keyTaskName.setKeyWordID(keyWordID);
				keyWordID++;
				allKeyWords.add(keyTaskName);

				if (row[6].equals("AP")) {
					String startDateTime = row[2];
					if (!startDateTime.isEmpty()) {
						String[] splitStartDate = startDateTime.split(" ");
						for (String startDate : splitStartDate) {
							if (!startDate.isEmpty()) {
								KeyWord keyStartDate = new KeyWord();
								keyStartDate.setTaskID(taskID);
								keyStartDate.setWord(startDate);
								chars = new ArrayList<Character>();
								for (int i = 0; i < startDate.length(); i++) {
									chars.add(Character.toUpperCase(startDate
											.charAt(i)));
								}
								keyStartDate.setSplitName(chars);
								keyStartDate.setKeyWordID(keyWordID);
								keyWordID++;
								allKeyWords.add(keyStartDate);
							}
						}
					}
				}
				if (row[6].equals("AP") || row[6].equals("DE")) {
					String endDateTime = row[3];
					if (!endDateTime.isEmpty()) {
						String[] splitEndDateTime = endDateTime.split(" ");
						for (String endDate : splitEndDateTime) {
							KeyWord keyEndDate = new KeyWord();
							keyEndDate.setTaskID(taskID);
							keyEndDate.setWord(endDate);
							chars = new ArrayList<Character>();
							for (int i = 0; i < endDate.length(); i++) {
								chars.add(Character.toUpperCase(endDate
										.charAt(i)));
							}
							keyEndDate.setSplitName(chars);
							keyEndDate.setKeyWordID(keyWordID);
							keyWordID++;
							allKeyWords.add(keyEndDate);
						}
					}
				}
				String remarks = row[4];
				// if remarks is not empty
				if (!remarks.equals("")) {
					String[] splitRemarks = remarks.split(" ");
					for (String remark : splitRemarks) {
						KeyWord keyRemarks = new KeyWord();
						ArrayList<Character> charsRemarks = new ArrayList<Character>();

						for (int j = 0; j < remark.length(); j++) {
							charsRemarks.add(Character.toUpperCase(remark
									.charAt(j)));
						}
						keyRemarks.setTaskID(taskID);
						keyRemarks.setWord(remark);
						keyRemarks.setSplitName(charsRemarks);
						keyRemarks.setKeyWordID(keyWordID);
						keyWordID++;
						allKeyWords.add(keyRemarks);
					}
				}

			}
		}
		reader.close();
	}// end of method
}

	// End of segment: C:\Users\SAM\Documents\main\src\storage\KeyWordStorage.java





	/**
	 * origin: C:\Users\SAM\Documents\main\src\storage\ProTaskStorage.java
	 */

package storage;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import userInterface.Logging;
import logic.Appointment;
import logic.Deadline;
import logic.Repository;
import logic.Task;
import logic.Enumerator.TaskType;

import com.opencsv.CSVParser;
import com.opencsv.CSVReader;
import com.opencsv.CSVWriter;

public class ProTaskStorage {

	private final String taskDataBase = "ProTaskDatabase.csv";
	private final String tempDataBase = "temp.csv";
	private final String dataBaseDir = "dataBaseDir.csv";
	private String currentDataBasePath = "";

	protected ArrayList<Appointment> allAppointments;
	private ArrayList<Task> allTasks;
	private ArrayList<Task> previousBuffer;
	private ArrayList<Integer> allTasksIDs;
	private final String[] dataBaseColumns;
	private final String[] dataBaseDirColumns = new String[] {
			"Current DataBase Directory", "Previous DataBase Directory" };
	private ArrayList<Task> tasks;
	private int idCounter;
	private boolean justLaunched;

	public ProTaskStorage() {

		dataBaseColumns = new String[] { "ID", "Description", "Start", "End",
				"Remarks", "Completed", "Type" };
		idCounter = 0;
		currentDataBasePath = System.getProperty("user.dir");
		retrieveDataBasesDir();
		if (!isFileExists(currentDataBasePath + "/" + taskDataBase)) {

			createDataBase(currentDataBasePath + "/" + taskDataBase);
		}

		try {
			loadAllTasks();
			justLaunched = true;
		} catch (Exception e) {
			Logging.getInputLog("Exception thrown when program attempst to load databsase into program!");
		}

	}

	private void createDataBaseDir() {
		try {
			FileWriter fWriter = new FileWriter(dataBaseDir);

			for (int i = 0; i < dataBaseDirColumns.length; i++) {
				fWriter.append(dataBaseDirColumns[i]);

				if (i == dataBaseDirColumns.length - 1) {

					fWriter.append('\n');
				} else {

					fWriter.append(",");
				}
			}
			fWriter.flush();
			fWriter.close();

			CSVWriter writer = new CSVWriter(new FileWriter(dataBaseDir, true));

			ArrayList<String> record = new ArrayList<String>();

			record.add(currentDataBasePath);
			record.add("");

			writer.writeNext((String[])

			record.toArray(new String[0]));

			writer.close();
		} catch (IOException e) {
			Logging.getInputLog("Exception thrown when program attemmpts to create database!");
		}
	}

	private void retrieveDataBasesDir() {
		boolean isColumn = true;
		boolean firstAppLaunch = false;

		try {
			if (!isFileExists(dataBaseDir)) {
				createDataBaseDir();
				firstAppLaunch = true;
			}
			if (!firstAppLaunch) {
				CSVReader reader = new CSVReader(new FileReader(dataBaseDir),
						CSVParser.DEFAULT_SEPARATOR,
						CSVParser.DEFAULT_QUOTE_CHARACTER, '\0');
				List<String[]> allRows = reader.readAll();
				for (String[] row : allRows) {
					if (isColumn) {
						isColumn = false;
					} else {
						currentDataBasePath = row[0];
					}
				}

				reader.close();
			}
		} catch (IOException e) {
			Logging.getInputLog("Exception thrown when program attemmpts to create database!");
		}
	}

	public String getCurrentDataBasePath() {
		retrieveDataBasesDir();
		return this.currentDataBasePath;
	}

	public boolean moveDataBase(String newPath) {
		boolean successMove = false;
		retrieveDataBasesDir();
		File file = new File(newPath);
		// 1) The user inputs the expected input (existent directory)
		if (file.exists() && file.isDirectory()) {

			File source = new File(currentDataBasePath + "/" + taskDataBase);
			File destination = new File(newPath + "/" + taskDataBase);
			File dataBaseDirPath = new File(dataBaseDir);
			if (!source.equals(destination)) {
				try {

					transferFileLocation(source, destination);
					source.delete();
					currentDataBasePath = newPath;
					dataBaseDirPath.delete();
					createDataBaseDir();

				} catch (IOException e) {
					Logging.getInputLog("IO File exceptions when attempting to move database!");
				}
				successMove = true;
			}
		}
		// 2 The user specifies file instead of target directory
		else if (file.exists() && file.isFile()) {
			Logging.getInputLog("User inputs file instead of new directory to move database!");
		}
		// 3 The user specifies a directory that doesn't exist
		else if (!file.exists()) {
			Logging.getInputLog("User inputs a non existent directory to move database!");
		}
		return successMove;
	}

	private void transferFileLocation(File source, File dest)
			throws IOException {
		InputStream input = null;
		OutputStream output = null;
		try {
			input = new FileInputStream(source);
			output = new FileOutputStream(dest);
			byte[] buf = new byte[1024];
			int bytesRead;
			while ((bytesRead = input.read(buf)) > 0) {
				output.write(buf, 0, bytesRead);
			}
		} finally {
			input.close();
			output.close();
		}
	}

	private boolean isFileExists(String dataBaseName) {
		boolean fileExist = false;
		File database = new File(dataBaseName);
		if (database.exists()) {
			fileExist = true;
		}
		return fileExist;
	}

	private void createDataBase(String dataBaseName) {
		try {
			FileWriter writer = new FileWriter(dataBaseName);

			for (int i = 0; i < dataBaseColumns.length; i++) {
				writer.append

				(dataBaseColumns[i]);

				if (i == dataBaseColumns.length - 1) {

					writer.append('\n');
				} else {

					writer.append(",");
				}
			}

			writer.flush();
			writer.close();
		} catch (IOException e) {
			Logging.getInputLog("Exception thrown when program attemmpts to create database!");
		}
	}

	/*
	 * private String dateToString(Date date) { DateFormat df = new
	 * SimpleDateFormat("dd/MM/yy"); String dateString = df.format(date); return
	 * dateString;
	 * 
	 * }
	 */
	private String intToString(int id) {
		StringBuilder sb = new StringBuilder();
		sb.append(id);

		return sb.toString();
	}

	private boolean isCorrectColumns(String[] dataBaseCols) {

		if (dataBaseColumns == dataBaseCols) {
			return true;
		} else
			return false;

	}

	private boolean checkColumnRow(String[] dataBaseCols) {
		if (dataBaseColumns == dataBaseCols) {
			return true;
		} else
			return false;
	}

	private void replaceTempToOriginal() {
		File oldfile = new File(tempDataBase);
		File newfile = new File(currentDataBasePath + "/" + taskDataBase);

		newfile.delete();
		if (oldfile.renameTo(newfile)) {
			Logging.getInputLog("Rename of " + tempDataBase + " is successful.");
		} else {
			Logging.getInputLog("Rename of " + tempDataBase + " to "
					+ newfile.getAbsolutePath() + " unsucessful.");
		}
	}

	private String convertToAbbreviation(String type) {
		String returnType = "NIL";

		if (type.equals("FLOATING")) {
			returnType = "FL";
		} else if (type.equals("APPOINTMENT")) {
			returnType = "AP";
		} else if (type.equals("DEADLINE")) {
			returnType = "DE";
		}
		return returnType;
	}

	/*
	 * private TaskType abbreviationToTaskType(String abb) { TaskType type =
	 * TaskType.FLOATING; if (abb.equals("AP")) { type = TaskType.APPOINTMENT; }
	 * else if (abb.equals("DE")) { type = TaskType.DEADLINE; } return type; }
	 */
	private Date stringToDate(String stringDate) {
		DateFormat format = new SimpleDateFormat("dd/MM/yy HH:mm",
				Locale.ENGLISH);
		Date date = new Date();

		try {
			date = format.parse(stringDate);

		} catch (ParseException e) {
			Logging.getInputLog("String unable to convert into Date");
		}
		return date; // Sat Jan 02 00:00:00 GMT 2010
	}

	// Please check with other methods if they are using addStringTask!!!!!
	public void addStringTask(String databaseName, int id, String desc,
			String startTime, String endTime, String remarks,
			boolean isCompleted, String type) {

		try {
			CSVWriter writer = new CSVWriter(new FileWriter(databaseName, true));

			ArrayList<String> record = new ArrayList<String>();

			record.add(intToString(id));
			record.add(desc);
			record.add(startTime);
			record.add(endTime);
			record.add(remarks);
			record.add(String.valueOf(isCompleted));
			record.add(convertToAbbreviation(type));

			writer.writeNext((String[])

			record.toArray(new String[0]));
			allTasksIDs.add(id);
			writer.close();

		} catch (IOException e) {
			Logging.getInputLog("Exception thrown when user wants to add new task with ID: "
					+ intToString(id) + "; Name: " + desc);
		}
	}

	public Repository writeToFile(Repository repo) {
		ArrayList<Task> obtainedTasks = repo.getBuffer();

		Task newTask = null;

		for (Task task : obtainedTasks) {
			if (!allTasksIDs.contains(task.getTaskID())) {
				newTask = task;
			}
		}
		if (newTask != null) {

			String type = newTask.getType().toString();
			repo.setCurrentID(idCounter + 1);

			if (type.equals("APPOINTMENT")) {
				Appointment item = (Appointment) newTask;
				addStringTask(currentDataBasePath + "/" + taskDataBase,
						repo.getCurrentID(), newTask.getTaskName(),
						item.getStartDateString(), item.getDueDateString(),
						newTask.getRemarks(), false, newTask.getType()
								.toString());
			} else if (type.equals("DEADLINE")) {
				Deadline item = (Deadline) newTask;
				newTask.setTaskID(repo.getCurrentID());
				addStringTask(currentDataBasePath + "/" + taskDataBase,
						repo.getCurrentID(), newTask.getTaskName(), "",
						item.getDueDateString(), newTask.getRemarks(), false,
						newTask.getType().toString());
			} else {
				newTask.setTaskID(repo.getCurrentID());

				addStringTask(currentDataBasePath + "/" + taskDataBase,
						repo.getCurrentID(), newTask.getTaskName(), "", "",
						newTask.getRemarks(), false, newTask.getType()
								.toString());
			}
			idCounter++;

			if (justLaunched) {
				justLaunched = false;
				allTasks.add(newTask);
				// repo.setBuffer(allTasks);
			}
		}
		return repo;
	}

	public Repository getAllTasks() throws FileNotFoundException {
		Repository mem = new Repository();
		try {
			CSVReader reader = new CSVReader(new FileReader(currentDataBasePath
					+ "/" + taskDataBase));
			tasks = new ArrayList<Task>();

			boolean isColumn = true;

			// Read all rows at once
			List<String[]> allRows = reader.readAll();
			for (String[] row : allRows) {
				if (isColumn) {
					if (!checkColumnRow(row)) {

						// Cannot continue because columns in database is

						// different then in system.
					}

					isColumn = false;

				} else {

					Task newTask = null;
					idCounter = Integer.parseInt(row[0]);
					if (row[6].equals("AP")) {

						newTask = new Appointment();
						newTask.setType(TaskType.APPOINTMENT);
						Appointment ap = (Appointment) newTask;
						ap.setTaskID(Integer.parseInt(row[0]));
						ap.setTaskName(row[1]);
						ap.setStartDate(stringToDate(row[2]));
						ap.setDate(stringToDate(row[3]));
						ap.setRemarks(row[4]);
						if (row[5].equalsIgnoreCase("true")) {
							ap.setIsCompleted(true);
						} else
							ap.setIsCompleted(false);
						ap.setType(TaskType.APPOINTMENT);
						tasks.add(ap);

					} else if (row[6].equals("DE")) {

						newTask = new Deadline();
						Deadline dl = (Deadline) newTask;
						dl.setTaskID(Integer.parseInt(row[0]));
						dl.setTaskName(row[1]);
						dl.setDate(stringToDate(row[3]));
						dl.setRemarks(row[4]);
						if (row[5].equalsIgnoreCase("true")) {
							dl.setIsCompleted(true);
						} else
							dl.setIsCompleted(false);
						dl.setType(TaskType.DEADLINE);
						tasks.add(dl);
					} else {
						newTask = new Task();
						newTask.setTaskID(Integer.parseInt(row[0]));
						newTask.setTaskName(row[1]);
						newTask.setRemarks(row[4]);
						if (row[5].equalsIgnoreCase("true")) {
							newTask.setIsCompleted(true);
						} else
							newTask.setIsCompleted(false);
						newTask.setType(TaskType.FLOATING);
						tasks.add(newTask);
					}

				}
			}
			reader.close();

		} catch (Exception e) {

			Logging.getInputLog("Exception thrown when loading tasks from database to program!");
		}
		mem.setBuffer(tasks);
		mem.setCurrentID(idCounter);
		return mem;

	}

	public Task getTask(int taskID) {
		Task toReturnTask = new Task();
		for (Task task : allTasks) {
			if (task.getTaskID() == taskID) {
				toReturnTask = task;
				break;
			}
		}
		return toReturnTask;
	}

	public void loadAllTasks() throws FileNotFoundException {
		// Build reader instance

		CSVReader reader = new CSVReader(new FileReader(currentDataBasePath
				+ "/" + taskDataBase));

		try {

			boolean isColumn = true;

			// Read all rows at once
			List<String[]> allRows = reader.readAll();

			if (allAppointments == null) {

				allAppointments = new ArrayList<Appointment>();

			}
			if (allTasks == null) {
				allTasks = new ArrayList<Task>();
				allTasksIDs = new ArrayList<Integer>();
			}

			if (previousBuffer == null) {
				previousBuffer = new ArrayList<Task>();
			}
			// Read CSV line by line and use the string array as you want
			for (String[] row : allRows) {
				if (isColumn) {
					if (!isCorrectColumns(row)) {

						// Cannot continue because columns in database is

						// different then in system.
					}

					isColumn = false;

				} else {

					Task newTask = null;
					allTasksIDs.add(Integer.parseInt(row[0]));
					if (row[6].equals("AP")) {

						newTask = new Appointment();
						newTask.setType(TaskType.APPOINTMENT);
						Appointment ap = (Appointment) newTask;
						ap.setTaskID(Integer.parseInt(row[0]));
						ap.setTaskName(row[1]);
						ap.setStartDate(stringToDate(row[2]));
						ap.setDate(stringToDate(row[3]));
						ap.setRemarks(row[4]);
						if (row[5].equalsIgnoreCase("true")) {
							ap.setIsCompleted(true);
						} else
							ap.setIsCompleted(false);
						ap.setType(TaskType.APPOINTMENT);
						allTasks.add(ap);

					} else if (row[6].equals("DE")) {

						newTask = new Deadline();
						Deadline dl = (Deadline) newTask;
						dl.setTaskID(Integer.parseInt(row[0]));
						dl.setTaskName(row[1]);
						dl.setDate(stringToDate(row[3]));
						dl.setRemarks(row[4]);
						if (row[5].equalsIgnoreCase("true")) {
							dl.setIsCompleted(true);
						} else
							dl.setIsCompleted(false);
						dl.setType(TaskType.DEADLINE);
						allTasks.add(dl);
					} else {
						newTask = new Task();
						newTask.setTaskID(Integer.parseInt(row[0]));
						newTask.setTaskName(row[1]);
						newTask.setRemarks(row[4]);
						if (row[5].equalsIgnoreCase("true")) {
							newTask.setIsCompleted(true);
						} else
							newTask.setIsCompleted(false);
						newTask.setType(TaskType.FLOATING);
						allTasks.add(newTask);

					}
				}

				reader.close();

			}
		} catch (Exception e) {

			Logging.getInputLog("Exception thrown when loading tasks from database to program!");
		}
	}

	public Repository clearAllTasks(Repository repo)
			throws FileNotFoundException {
		File file = new File(currentDataBasePath + "/" + taskDataBase);
		previousBuffer = repo.getBuffer();
		repo.setBuffer(new ArrayList<Task>());
		allTasksIDs.clear();
		idCounter = 0;

		if (file.delete()) {
			Logging.getInputLog(file.getName() + " is deleted!");
		} else {
			Logging.getInputLog("Delete operation failed!");
		}
		createDataBase(currentDataBasePath + "/" + taskDataBase);
		repo.setCurrentID(idCounter);

		return repo;
	}

	public void updateDeleteTask(Repository repo) {

		createDataBase(tempDataBase);

		for (Task task : repo.getBuffer()) {
			String type = task.getType().toString();
			if (type.equals("APPOINTMENT")) {

				Appointment item = (Appointment) task;
				addStringTask(tempDataBase, task.getTaskID(),
						task.getTaskName(), item.getStartDateString(),
						item.getDueDateString(), task.getRemarks(),
						task.getCompleted(), task.getType().toString());

			} else if (type.equals("DEADLINE")) {

				Deadline item = (Deadline) task;
				addStringTask(tempDataBase, task.getTaskID(),
						task.getTaskName(), "", item.getDueDateString(),
						task.getRemarks(), task.getCompleted(), task.getType()
								.toString());
			} else {

				addStringTask(tempDataBase, task.getTaskID(),
						task.getTaskName(), "", "", task.getRemarks(),
						task.getCompleted(), task.getType().toString());
			}
		}
		replaceTempToOriginal();
	}
}

	// End of segment: C:\Users\SAM\Documents\main\src\storage\ProTaskStorage.java





