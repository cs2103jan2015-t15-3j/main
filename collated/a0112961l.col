//@author: a0112961l



	/**
	 * origin: C:\Users\SAM\Documents\main\src\userInterface\Logging.java
	 */


public class Logging {

	private static ArrayList<String> myList = new ArrayList<String>();
	private static final String ERROR_MESSAGE = "Error adding to textfile\n";

	public static void getInputLog(String input) {

		Date date = new Date();
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yy HH:mm");// dd/MM/yyyy

		String myTextFile = "loggingText.txt";

		checkFileExist(myTextFile);
		String time = dateFormat.format(date).toString() + ": " + input;
		myList.add(time);
		saveFile(myTextFile);
	}

	// Checks whether file exist else create a new file
	public static Boolean checkFileExist(String myTextFile) {
		File myFile = new File(myTextFile);

		try {
			myFile.createNewFile();
		} catch (IOException e) {
			System.out.println(ERROR_MESSAGE);
			System.exit(0);
		}
		return false;
	}

	private static void saveFile(String myTextFile) {
		File file = new File(myTextFile);
		try {
			FileWriter fw = new FileWriter(file.getAbsoluteFile());
			BufferedWriter bw = new BufferedWriter(fw);

			for (int i = 0; i < myList.size(); i++) {
				bw.write(myList.get(i));

				if (i < myList.size() - 1) {
					bw.newLine();
				}
			}
			bw.close();

		} catch (IOException e) {
			System.out.println(ERROR_MESSAGE);
			System.exit(0);
		}
	}
}
	// End of segment: C:\Users\SAM\Documents\main\src\userInterface\Logging.java





	/**
	 * origin: C:\Users\SAM\Documents\main\src\userInterface\PrintCompletedList.java
	 */


public class PrintCompletedList {

	private static final String HTML_OPEN = "<html>";
	private static final String HTML_CLOSE = "</html>";
	private static final String HTML_BREAK = "<br>";
	private static final String HTML_FONT_SIZE_4 = "<font size=4>";
	private static final String HTML_MAROON_COLOR = "<font color=#800000>";
	private static final String HTML_PURPLE_COLOR = "<font color=#5d2e8a>";
	private static final String HTML_FONT_CLOSE = "</font>";

	protected static String returnString(Task task) {

		int id;
		String name, start, end, remarks, str = null;

		boolean completed = task.getCompleted();

		if (completed == true) {

			String type = task.getType().toString();

			if (type.equals("APPOINTMENT")) {

				Appointment appt = (Appointment) task;

				id = task.getTaskID();
				name = task.getTaskName();
				start = appt.getStartDateString();
				end = appt.getDueDateString();
				remarks = task.getRemarks();

				str = HTML_OPEN + HTML_FONT_SIZE_4 + HTML_PURPLE_COLOR
						+ HTML_BREAK + id + ". " + " " + name + HTML_BREAK
						+ "Start: " + start + HTML_BREAK + "Due: " + end
						+ HTML_BREAK + "Remarks: " + remarks + HTML_FONT_CLOSE
						+ HTML_BREAK + HTML_CLOSE;
			} else if (type.equals("DEADLINE")) {
				Deadline dl = (Deadline) task;

				id = task.getTaskID();
				name = task.getTaskName();
				start = " - ";
				end = dl.getDueDateString();
				remarks = task.getRemarks();

				str = HTML_OPEN + HTML_FONT_SIZE_4 + HTML_MAROON_COLOR
						+ HTML_BREAK + id + ". " + " " + name + HTML_BREAK
						+ "Start: " + start + HTML_BREAK + "Due: " + end
						+ HTML_BREAK + "Remarks: " + remarks + HTML_FONT_CLOSE
						+ HTML_BREAK + HTML_CLOSE;
			} else {

				id = task.getTaskID();
				name = task.getTaskName();
				start = " - ";
				end = " - ";
				remarks = task.getRemarks();

				str = HTML_OPEN + HTML_FONT_SIZE_4 + HTML_BREAK + id + ". "
						+ " " + name + HTML_BREAK + "Start: " + start
						+ HTML_BREAK + "Due: " + end + HTML_BREAK + "Remarks: "
						+ remarks + HTML_FONT_CLOSE + HTML_BREAK + HTML_CLOSE;
			}

		}
		return str;
	}
}
	// End of segment: C:\Users\SAM\Documents\main\src\userInterface\PrintCompletedList.java





	/**
	 * origin: C:\Users\SAM\Documents\main\src\userInterface\PrintPowerSearchList.java
	 */


public class PrintPowerSearchList {

	private static final String HTML_OPEN = "<html>";
	private static final String HTML_CLOSE = "</html>";
	private static final String HTML_BREAK = "<br>";
	private static final String HTML_FONT_SIZE_4 = "<font size=4>";
	private static final String HTML_MAROON_COLOR = "<font color=#800000>"; 
	private static final String HTML_PURPLE_COLOR = "<font color=#5d2e8a>";
	private static final String HTML_FONT_CLOSE = "</font>";

	protected static String returnString(Task task) {

		int id;
		String name, start, end, remarks, str = null;

		boolean completed = task.getCompleted();

		String type = task.getType().toString();

		if (type.equals("APPOINTMENT")) {

			Appointment appt = (Appointment) task;

			id = task.getTaskID();
			name = task.getTaskName();
			start = appt.getStartDateString();
			end = appt.getDueDateString();
			remarks = task.getRemarks();

			str = HTML_OPEN + HTML_FONT_SIZE_4 + HTML_PURPLE_COLOR + HTML_BREAK
					+ id + ". " + " " + name + HTML_BREAK + "Start: " + start
					+ HTML_BREAK + "Due: " + end + HTML_BREAK + "Remarks: "
					+ remarks + HTML_FONT_CLOSE + HTML_BREAK + HTML_CLOSE;
		}

		else if (type.equals("DEADLINE")) {
			Deadline dl = (Deadline) task;

			id = task.getTaskID();
			name = task.getTaskName();
			start = " - ";
			end = dl.getDueDateString();
			remarks = task.getRemarks();

			str = HTML_OPEN + HTML_FONT_SIZE_4 + HTML_MAROON_COLOR + HTML_BREAK
					+ id + ". " + " " + name + HTML_BREAK + "Start: " + start
					+ HTML_BREAK + "Due: " + end + HTML_BREAK + "Remarks: "
					+ remarks + HTML_FONT_CLOSE + HTML_BREAK + HTML_CLOSE;

		} else {

			id = task.getTaskID();
			name = task.getTaskName();
			start = " - ";
			end = " - ";
			remarks = task.getRemarks();

			str = HTML_OPEN + HTML_FONT_SIZE_4 + HTML_BREAK + id + ". " + " "
					+ name + HTML_BREAK + "Start: " + start + HTML_BREAK
					+ "Due: " + end + HTML_BREAK + "Remarks: " + remarks
					+ HTML_FONT_CLOSE + HTML_BREAK + HTML_CLOSE;
		}
		return str;
	}
}

	// End of segment: C:\Users\SAM\Documents\main\src\userInterface\PrintPowerSearchList.java





	/**
	 * origin: C:\Users\SAM\Documents\main\src\userInterface\PrintSetting.java
	 */


public class PrintSetting {

	private static final Stack<String> stack = new Stack<String>();
	private static final Stack<String> temp = new Stack<String>();
	ArrayList<Task> psList = new ArrayList<Task>();

	/*
	 * Display Setting for UI
	 */
	protected static void displaySetting(String firstWord, Repository repo) {

		if ((firstWord.toLowerCase().equals("sort")) || (firstWord.toLowerCase().equals("s"))) {
			
			clearAndReloadBothPanelForTempList(repo);
			UserInterfaceMain.tabbedPane.setSelectedIndex(0);
			stack.push(firstWord);
		}
		
		else if ((firstWord.toLowerCase().equals("search"))
				|| (firstWord.toLowerCase().equals("find"))) {

			clearAndReloadBothPanelForTempList(repo);
			UserInterfaceMain.tabbedPane.setSelectedIndex(0);
		}

		else if ((firstWord.toLowerCase().equals("clear") || (firstWord
				.toLowerCase().equals("cl")))) {
			stack.push(firstWord);
			clearToDoPanel();
			clearCompletedPanel();
			UserInterfaceMain.tabbedPane.setSelectedIndex(0);
		}

		else if ((firstWord.toLowerCase().equals("display") || (firstWord
				.toLowerCase().equals("dp")))) {

			clearAndReloadBothPanel(repo);
			UserInterfaceMain.tabbedPane.setSelectedIndex(0);
		}

		else if ((firstWord.toLowerCase().equals("add") || (firstWord
				.toLowerCase().equals("a") || (firstWord.toLowerCase().equals(
				"delete") || (firstWord.toLowerCase().equals("d")))))) {

			stack.push(firstWord);
			clearAndReloadBothPanel(repo);
			UserInterfaceMain.tabbedPane.setSelectedIndex(0);
		}

		else if ((firstWord.toLowerCase().equals("edit") || (firstWord
				.toLowerCase().equals("e")))) {

			stack.push(firstWord);
			clearAndReloadBothPanel(repo);
			UserInterfaceMain.tabbedPane.setSelectedIndex(0);
		}

		else if ((firstWord.toLowerCase().equals("complete"))
				|| (firstWord.toLowerCase().equals("cp"))) {

			stack.push(firstWord);
			clearAndReloadBothPanel(repo);
			UserInterfaceMain.tabbedPane.setSelectedIndex(1);
		}

		else if ((firstWord.toLowerCase().equals("uncomplete") || (firstWord
				.toLowerCase().equals("ucp")))) {

			stack.push(firstWord);
			clearAndReloadBothPanel(repo);
			UserInterfaceMain.tabbedPane.setSelectedIndex(0);
		}
		
		else if ((firstWord.toLowerCase().equals("move"))
				|| (firstWord.toLowerCase().equals("mv"))) {
			stack.push(firstWord);
			clearAndReloadBothPanel(repo);
			UserInterfaceMain.tabbedPane.setSelectedIndex(0);
		}

		else if ((firstWord.toLowerCase().equals("undo") || (firstWord
				.toLowerCase().equals("u")))) {

			clearAndReloadBothPanel(repo);

			if (!(stack.isEmpty())) {
				if ((stack.peek().equals("uncomplete"))
						|| (stack.peek().equals("ucp"))) {

					stack.pop();
					temp.push("ucp");

					clearAndReloadBothPanel(repo);
					UserInterfaceMain.tabbedPane.setSelectedIndex(1);
				}

				else if ((stack.peek().equals("complete"))
						|| (stack.peek().equals("cp"))) {

					stack.pop();
					temp.push("cp");

					clearAndReloadBothPanel(repo);
					UserInterfaceMain.tabbedPane.setSelectedIndex(0);
				}

				else if ((stack.peek().equals("add"))
						|| (stack.peek().equals("a"))) {

					stack.pop();
					temp.push("a");

					clearAndReloadBothPanel(repo);
					UserInterfaceMain.tabbedPane.setSelectedIndex(0);
				}

				else if ((stack.peek().equals("delete"))
						|| (stack.peek().equals("d"))) {

					stack.pop();
					temp.push("d");

					clearAndReloadBothPanel(repo);
					UserInterfaceMain.tabbedPane.setSelectedIndex(0);
				} else if ((stack.peek().equals("clear"))
						|| (stack.peek().equals("cl"))) {

					stack.pop();
					temp.push("cl");

					clearAndReloadBothPanel(repo);
					UserInterfaceMain.tabbedPane.setSelectedIndex(0);
				} else if ((stack.peek().equals("edit"))
						|| (stack.peek().equals("e"))) {

					stack.pop();
					temp.push("e");

					clearAndReloadBothPanel(repo);
					UserInterfaceMain.tabbedPane.setSelectedIndex(0);
				} else if ((stack.peek().equals("sort"))
						|| (stack.peek().equals("s"))) {

					stack.pop();
					temp.push("s");

					clearAndReloadBothPanel(repo);
					UserInterfaceMain.tabbedPane.setSelectedIndex(0);
				}
			} else if (stack.isEmpty()) {
				clearAndReloadBothPanel(repo);
				UserInterfaceMain.tabbedPane.setSelectedIndex(0);
			}
		} else if ((firstWord.toLowerCase().equals("redo") || (firstWord
				.toLowerCase().equals("r")))) {

			clearAndReloadBothPanel(repo);

			if (!(temp.isEmpty())) {
				if (temp.peek().equals("cp")) {

					temp.pop();
					clearAndReloadBothPanel(repo);
					UserInterfaceMain.tabbedPane.setSelectedIndex(1);

				} else if (temp.peek().equals("ucp")) {

					temp.pop();
					clearAndReloadBothPanel(repo);
					UserInterfaceMain.tabbedPane.setSelectedIndex(0);

				} else if (temp.peek().equals("a")) {

					temp.pop();
					clearAndReloadBothPanel(repo);
					UserInterfaceMain.tabbedPane.setSelectedIndex(0);

				} else if (temp.peek().equals("d")) {

					temp.pop();
					clearAndReloadBothPanel(repo);
					UserInterfaceMain.tabbedPane.setSelectedIndex(0);

				} else if (temp.peek().equals("cl")) {

					temp.pop();
					clearAndReloadBothPanel(repo);
					UserInterfaceMain.tabbedPane.setSelectedIndex(0);

				} else if (temp.peek().equals("e")) {

					temp.pop();
					clearAndReloadBothPanel(repo);
					UserInterfaceMain.tabbedPane.setSelectedIndex(0);

				} else if (temp.peek().equals("s")) {

					temp.pop();
					clearAndReloadBothPanelForTempList(repo);
					UserInterfaceMain.tabbedPane.setSelectedIndex(0);
				}
			}

			else if (temp.isEmpty()) {
				clearAndReloadBothPanel(repo);
				UserInterfaceMain.tabbedPane.setSelectedIndex(0);
			}
		}
	}

	protected static void clearToDoPanel() {
		UserInterfaceMain.toDoPanel.revalidate();
		UserInterfaceMain.toDoPanel.repaint();
		UserInterfaceMain.toDoPanel.removeAll();
	}

	protected static void clearCompletedPanel() {
		UserInterfaceMain.completedPanel.revalidate();
		UserInterfaceMain.completedPanel.repaint();
		UserInterfaceMain.completedPanel.removeAll();
	}

	protected static void clearAndReloadBothPanel(Repository repo) {
		clearToDoPanel();
		clearCompletedPanel();
		printLabel(repo);
		printCompletedLabel(repo);
	}

	protected static void clearAndReloadBothPanelForTempList(Repository repo) {
		clearToDoPanel();
		clearCompletedPanel();
		printTempLabel(repo);
		printCompletedLabel(repo);
	}

	protected static void printCompletedLabel(Repository list) {
		Collections.sort(list.getBuffer(), Compare.numComparator);

		for (int i = 0; i < list.getBufferSize(); i++) {
			Task task = list.getBuffer().get(i);

			String str = PrintCompletedList.returnString(task);
			JLabel completeLabel = new JLabel(str);
			Border border = BorderFactory.createMatteBorder(0, 0, 1, 0,
					Color.darkGray);
			completeLabel.setBorder(border);
			UserInterfaceMain.completedPanel.add(completeLabel);
		}
	}

	protected static void printLabel(Repository list) {
		Collections.sort(list.getBuffer(), Compare.numComparator);
		for (int i = 0; i < list.getBufferSize(); i++) {
			Task task = list.getBuffer().get(i);

			String str = PrintToDoList.returnString(task);
			JLabel toDoLabel = new JLabel(str);
			Border border = BorderFactory.createMatteBorder(0, 0, 1, 0,
					Color.darkGray);
			toDoLabel.setBorder(border);
			UserInterfaceMain.toDoPanel.add(toDoLabel);
		}
	}

	protected static void printTempLabel(Repository list) {
		for (int i = 0; i < list.getTempBufferSize(); i++) {
			Task task = list.getTempBuffer().get(i);

			String str = PrintTempToDoList.returnString(task);
			JLabel tempLabel = new JLabel(str);
			Border border = BorderFactory.createMatteBorder(0, 0, 1, 0,
					Color.darkGray);
			tempLabel.setBorder(border);
			UserInterfaceMain.toDoPanel.add(tempLabel);
		}
	}

	protected static void printPowerSearchLabel(ArrayList<Task> list) {
		Collections.sort(list, Compare.numComparator);
		for (int i = 0; i < list.size(); i++) {
			Task task = list.get(i);

			String str = PrintPowerSearchList.returnString(task);
			JLabel psLabel = new JLabel(str);
			Border border = BorderFactory.createMatteBorder(0, 0, 1, 0,
					Color.darkGray);
			psLabel.setBorder(border);
			UserInterfaceMain.toDoPanel.add(psLabel);
		}
	}
}

	// End of segment: C:\Users\SAM\Documents\main\src\userInterface\PrintSetting.java





	/**
	 * origin: C:\Users\SAM\Documents\main\src\userInterface\PrintTempToDoList.java
	 */


public class PrintTempToDoList {

	private static final String HTML_OPEN = "<html>";
	private static final String HTML_CLOSE = "</html>";
	private static final String HTML_BREAK = "<br>";
	private static final String HTML_FONT_SIZE_4 = "<font size=4>";
	private static final String HTML_MAROON_COLOR = "<font color=#800000>";
	private static final String HTML_PURPLE_COLOR = "<font color=#5d2e8a>";
	private static final String HTML_FONT_CLOSE = "</font>";

	protected static String returnString(Task task) {

		int id;
		String name, start, end, remarks, str = null;

		boolean completed = task.getCompleted();
		if (completed == false) {

			String type = task.getType().toString();

			if (type.equals("APPOINTMENT")) {

				Appointment appt = (Appointment) task;

				id = task.getTaskID();
				name = task.getTaskName();
				start = appt.getStartDateString();
				end = appt.getDueDateString();
				remarks = task.getRemarks();

				str = HTML_OPEN + HTML_FONT_SIZE_4 + HTML_PURPLE_COLOR
						+ HTML_BREAK + id + ". " + " " + name + HTML_BREAK
						+ "Start: " + start + HTML_BREAK + "Due: " + end
						+ HTML_BREAK + "Remarks: " + remarks + HTML_FONT_CLOSE
						+ HTML_BREAK + HTML_CLOSE;
			}

			else if (type.equals("DEADLINE")) {
				Deadline dl = (Deadline) task;

				id = task.getTaskID();
				name = task.getTaskName();
				start = " - ";
				end = dl.getDueDateString();
				remarks = task.getRemarks();

				str = HTML_OPEN + HTML_FONT_SIZE_4 + HTML_MAROON_COLOR
						+ HTML_BREAK + id + ". " + " " + name + HTML_BREAK
						+ "Start: " + start + HTML_BREAK + "Due: " + end
						+ HTML_BREAK + "Remarks: " + remarks + HTML_FONT_CLOSE
						+ HTML_BREAK + HTML_CLOSE;
			} else {

				id = task.getTaskID();
				name = task.getTaskName();
				start = " - ";
				end = " - ";
				remarks = task.getRemarks();

				str = HTML_OPEN + HTML_FONT_SIZE_4 + HTML_BREAK + id + ". "
						+ " " + name + HTML_BREAK + "Start: " + start
						+ HTML_BREAK + "Due: " + end + HTML_BREAK + "Remarks: "
						+ remarks + HTML_FONT_CLOSE + HTML_BREAK + HTML_CLOSE;
			}
		}
		return str;
	}
}
	// End of segment: C:\Users\SAM\Documents\main\src\userInterface\PrintTempToDoList.java





	/**
	 * origin: C:\Users\SAM\Documents\main\src\userInterface\PrintToDoList.java
	 */


public class PrintToDoList {

	private static final String HTML_OPEN = "<html>";
	private static final String HTML_CLOSE = "</html>";
	private static final String HTML_BREAK = "<br>";
	private static final String HTML_FONT_SIZE_4 = "<font size=4>";
	private static final String HTML_MAROON_COLOR = "<font color=#800000>"; 
	private static final String HTML_PURPLE_COLOR = "<font color=#5d2e8a>";
	private static final String HTML_FONT_CLOSE = "</font>";

	protected static String returnString(Task task) {

		int id;
		String name, start, end, remarks, str = null;

		boolean completed = task.getCompleted();

		if (completed == false) {

			String type = task.getType().toString();

			if (type.equals("APPOINTMENT")) {

				Appointment appt = (Appointment) task;

				id = task.getTaskID();
				name = task.getTaskName();
				start = appt.getStartDateString();
				end = appt.getDueDateString();
				remarks = task.getRemarks();

				str = HTML_OPEN + HTML_FONT_SIZE_4 + HTML_PURPLE_COLOR
						+ HTML_BREAK + id + ". " + " " + name + HTML_BREAK
						+ "Start: " + start + HTML_BREAK + "Due: " + end
						+ HTML_BREAK + "Remarks: " + remarks + HTML_FONT_CLOSE
						+ HTML_BREAK + HTML_CLOSE;
			}

			else if (type.equals("DEADLINE")) {
				Deadline dl = (Deadline) task;

				id = task.getTaskID();
				name = task.getTaskName();
				start = " - ";
				end = dl.getDueDateString();
				remarks = task.getRemarks();

				str = HTML_OPEN + HTML_FONT_SIZE_4 + HTML_MAROON_COLOR
						+ HTML_BREAK + id + ". " + " " + name + HTML_BREAK
						+ "Start: " + start + HTML_BREAK + "Due: " + end
						+ HTML_BREAK + "Remarks: " + remarks + HTML_FONT_CLOSE
						+ HTML_BREAK + HTML_CLOSE;

			} else {

				id = task.getTaskID();
				name = task.getTaskName();
				start = " - ";
				end = " - ";
				remarks = task.getRemarks();

				str = HTML_OPEN + HTML_FONT_SIZE_4 + HTML_BREAK + id + ". "
						+ " " + name + HTML_BREAK + "Start: " + start
						+ HTML_BREAK + "Due: " + end + HTML_BREAK + "Remarks: "
						+ remarks + HTML_FONT_CLOSE + HTML_BREAK + HTML_CLOSE;
			}
		}
		return str;
	}
}
	// End of segment: C:\Users\SAM\Documents\main\src\userInterface\PrintToDoList.java





	/**
	 * origin: C:\Users\SAM\Documents\main\src\userInterface\UserInterfaceMain.java
	 */


@SuppressWarnings("serial")
public class UserInterfaceMain extends JPanel {

	private JFrame frame;
	private static String userInput = new String();
	protected static JTextField inputTextField;
	static JTextArea feedbackTextArea;
	static JPanel completedPanel;
	static JPanel toDoPanel;
	static JTabbedPane tabbedPane;
	private AdjustmentListener adjustListener;
	private JScrollPane scrollPane;

	Repository repo = new Repository();
	ArrayList<Task> psList = new ArrayList<Task>();
	
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					UserInterfaceMain window = new UserInterfaceMain();
					window.frame.setVisible(true);
				} catch (Exception e) {
					System.out.println("Application can't launched");
				}
			}
		});
	}

	/**
	 * Create the application.
	 * 
	 * @throws FileNotFoundException
	 */
	public UserInterfaceMain() throws FileNotFoundException {
		initialUIRun();
	}

	/**
	 * Initialize the contents of the frame.
	 * 
	 * @throws FileNotFoundException
	 */
	private void initialUIRun() throws FileNotFoundException {
		proTaskFrame();

		tabbedPane = new JTabbedPane(JTabbedPane.TOP);
		tabbedPane.setBounds(38, 14, 448, 561);
		frame.getContentPane().add(tabbedPane);

		completedPanel = new JPanel();
		completedPanel.setForeground(Color.DARK_GRAY);
		completedPanel.setBackground(new Color(240, 255, 240));
		ImageIcon completedIcon = new ImageIcon(
				(UserInterfaceMain.class
						.getResource("/userInterface/ImageIcon/completedIcon.png")));

		toDoPanel = new JPanel();
		toDoPanel.setForeground(Color.DARK_GRAY);
		toDoPanel.setBackground(new Color(245, 245, 245));
		ImageIcon toDoIcon = new ImageIcon(
				(UserInterfaceMain.class
						.getResource("/userInterface/ImageIcon/toDoIcon.png")));

		JScrollPane toDoScroller = new JScrollPane();
		toDoScroller.setVisible(true);

		tabbedPane.addTab("To-Do", toDoIcon, toDoScroller, null);
		toDoScroller.setViewportView(toDoPanel);
		toDoPanel.setLayout(new BoxLayout(toDoPanel, BoxLayout.Y_AXIS));

		JScrollPane completedScroller = new JScrollPane();
		completedScroller.setVisible(true);

		tabbedPane.addTab("Completed", completedIcon, completedScroller, null);
		completedScroller.setViewportView(completedPanel);
		completedPanel
				.setLayout(new BoxLayout(completedPanel, BoxLayout.Y_AXIS));

		scrollPane = new JScrollPane();
		scrollPane.setBounds(38, 591, 448, 46);
		frame.getContentPane().add(scrollPane);

		feedbackTextArea = new JTextArea();
		scrollPane.setViewportView(feedbackTextArea);
		feedbackTextArea.setFont(new Font("Trebuchet MS", Font.BOLD
				| Font.ITALIC, 16));
		feedbackTextArea.setForeground(Color.BLACK);
		feedbackTextArea.setBackground(Color.LIGHT_GRAY);

		feedbackTextArea.setText(Message.WELCOME);

		inputTextField = new JTextField();
		inputTextField.setBounds(38, 651, 448, 27);
		frame.getContentPane().add(inputTextField);
		inputTextField.setColumns(10);

		JLabel helpLabel = new JLabel("Press 'F1' for Help Guide");
		helpLabel.setForeground(new Color(0, 139, 139));
		helpLabel.setBounds(38, 679, 448, 27);
		frame.getContentPane().add(helpLabel);

		// initial load
		repo = LogicMain.loadStorage();
		PrintSetting.clearAndReloadBothPanel(repo);

		KeyListener listener = new KeyListener() {
			public void keyPressed(KeyEvent e) {
				if (e.getKeyCode() == KeyEvent.VK_ENTER) {

					userInput = inputTextField.getText().toString();
					String firstWord = getFirstWord(userInput);
					
					repo = LogicMain.parseString(userInput, repo);

					try {
						PrintSetting.displaySetting(firstWord, repo);
					} catch (EmptyStackException e1) {
						Logging.getInputLog("Empty Stack Exception from Display Setting");
					}

					adjustListener = new AdjustmentListener() {
						public void adjustmentValueChanged(AdjustmentEvent e) {
							e.getAdjustable().setValue(
									e.getAdjustable().getMaximum());
						}
					};
					toDoScroller.getVerticalScrollBar().addAdjustmentListener(
							adjustListener);

					completedScroller.getVerticalScrollBar()
							.addAdjustmentListener(adjustListener);

					InputHistory.getInput(userInput);
					Logging.getInputLog(userInput);
					feedbackTextArea.setText(repo.getFeedback());
					inputTextField.setText(null);

				} else if (e.getKeyCode() == KeyEvent.VK_F1) {
					HelpGuide.main(null);
				}
			}

			public void keyReleased(KeyEvent e) {

				String input = inputTextField.getText().toString();

				if ((input.regionMatches(true, 0, "ps ", 0, 3))) {

					PrintSetting.clearToDoPanel();
					tabbedPane.setSelectedIndex(0);
					psList = ParserPowerSearch.powerSearch(input);
					PrintSetting.printPowerSearchLabel(psList);
				}

				InputHistory.retrieveInputText(e);
				toDoScroller.getVerticalScrollBar().removeAdjustmentListener(
						adjustListener);
				completedScroller.getVerticalScrollBar()
						.removeAdjustmentListener(adjustListener);
			}

			public void keyTyped(KeyEvent e) {
			}
		};
		inputTextField.addKeyListener(listener);
	}

	private void proTaskFrame() {

		frame = new JFrame("ProTask");
		frame.getContentPane().setBackground(Color.WHITE);
		frame.setResizable(false);
		frame.setIconImage(Toolkit
				.getDefaultToolkit()
				.getImage(
						UserInterfaceMain.class
								.getResource("/userInterface/ImageIcon/proTaskLogo.png")));
		frame.getContentPane().setFont(new Font("Tahoma", Font.PLAIN, 28));
		frame.getContentPane().setEnabled(false);
		frame.setBounds(100, 100, 535, 770);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
	}

	protected static String getFirstWord(String userCommand) {
		String commandTypeString = userCommand.trim().split("\\s+")[0];
		return commandTypeString;
	}
}
	// End of segment: C:\Users\SAM\Documents\main\src\userInterface\UserInterfaceMain.java





